<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <title>Document</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M"
        crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"
        crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1"
        crossorigin="anonymous"></script>


    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

</head>

<body>
    <div class="container-fluid" id="app">

        {{ deleteLatter }}

        <div class="row">

            <div class="col-4">
                <div class="card border-light text-white bg-primary " style="max-width: 20rem;">
                    <div class="card-header">
                        <i class="material-icons md-36">face</i> Users <span class="badge badge-secondary">
                            {{ connectedUsers.length }}</span>
                    </div>
                    <div class="card-body">
                        <h4 class="card-title">在线用户:</h4>

                        <ul class="list-group">
                            <li class="list-group-item list-group-item-info" v-for="user in connectedUsers">
                                {{ user }} &nbsp;
                                <span v-if="userIsTyping(user)">
                                        <i  class="material-icons">create </i>...
                                </span>

                            </li>
                        </ul>

                    </div>
                </div>

            </div>

            <div class="col-8">
                <div class="card text-white bg-secondary " style="">
                    <div class="card-header">
                        <i class="material-icons">chat </i> Let's chat
                    </div>
                    <div class="card-body">
                        <h4 class="card-title">Secondary card title</h4>
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>

                        <ul class="list-unstyled" style="max-height:450px;overflow:auto;" v-on:DOMNodeInsertedIntoDocument="chatPanelScrollToBottom">
                            <li v-for="message in messages" class="media">

                                <div v-if="message.type == 'info' " class="info">
                                    <i class="material-icons">notifications</i>
                                    <div class="d-inline-block bg-warning">
                                        {{ message.msg }}
                                    </div>

                                    <i class="material-icons">event_note</i>

                                </div>


                                <div v-if="message.type == 'chat' " class="chat">

                                    <i class="material-icons">chat</i>
                                    <span class="bg-primary">{{ message.user }} </span> {{ message.timestamp }}
                                    <div class="d-inline bg-success"> {{ message.text }}</div>


                                </div>

                            </li>

                        </ul>

                        <hr style="color:blueviolet">
                        <form @submit.prevent="send" class="form-inline">
                            <div class="form-group mx-sm-3">
                                <label for="message" class="sr-only">输入</label>
                                <input v-model="message.text" v-on:keyup="usersAreTyping" v-on:keyup.13="stoppedTyping('13')" v-on:keyup.8="stoppedTyping('8')"
                                    type="text" class="form-control" id="message" placeholder="your message here!">
                            </div>
                            <button type="submit" class="btn btn-primary">send</button>
                        </form>

                    </div>
                </div>
            </div>

        </div>
    </div>
    <script src="https://cdn.bootcss.com/socket.io/2.0.3/socket.io.js"></script>

    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="https://unpkg.com/vue/dist/vue.js"></script>

    <script src="https://cdn.bootcss.com/moment.js/2.17.1/moment.min.js"></script>
    <script>
        // TODO 移到单独的一个js文件中去


        var socket = io(); // io.connect();

        new Vue({
            el: '#app',
            data: {
                deleteLatter: "hello world",
                connectedUsers: [],
                messages: [],
                message: {
                    "type": "",
                    "action": "",
                    "user": "",
                    "text": "",
                    "timestamp": ""
                },
                areTyping: []
            },
            created: function () {
                // if server emit 'user joined', update connectedUsers array
                socket.on('user joined', function (data) {
                    // data is socket-id
                    var socketId = data;
                    // get already connected user firstly 
                    axios.get('/onlineusers')
                        .then(function (response) {
                            for (var key in response.data) {
                                if (this.connectedUsers.indexOf(key) <= -1) {
                                    this.connectedUsers.push(key);
                                }
                            }
                        }.bind(this));

                    var infoMsg = {
                        "type": 'info',
                        "msg": "User " + socketId + ' has joined '
                    };
                    this.messages.push(infoMsg);


                    this.connectedUsers.push(socketId);
                }.bind(this));

                // if server emits 'chat.message', update the message array
                socket.on('chat.message', function (message) {
                    this.messages.push(message);
                }.bind(this));

                // server emits 'user typing' 
                socket.on('user typing', function (username) {
                    this.areTyping.push(username);
                }.bind(this));

                // server emits 'stopped typing'
                socket.on('stopped typing', function (username) {

                    var index = this.areTyping.indexOf(username);
                    if (index >= 0) {
                        this.areTyping.splice(index, 1);
                    }
                }.bind(this));

                // if server broadcasts 'user left', remove leaving user from connectedUsers array
                socket.on('user left', function (socketId) {
                    var index = this.connectedUsers.indexOf(socketId);
                    // console.log(index);
                    if (index >= 0) {
                        this.connectedUsers.splice(index, 1);
                    }
                    var infoMsg = {
                        "type": 'info',
                        "msg": "User " + socketId + ' has left '
                    };
                    this.messages.push(infoMsg);

                }.bind(this));
            },
            methods: {
                send: function () {
                    this.message.type = "chat";
                    this.message.user = socket.id;

                    // this.message.timestamp = 'today';
                    this.message.timestamp = moment().calendar();

                    socket.emit('chat.message', this.message);
                    this.message.type = '';
                    this.message.user = '';
                    this.message.text = '';
                    this.message.timestamp = '';
                },
                userIsTyping: function (username) {
                    return this.areTyping.indexOf(username) >= 0;
                },
                usersAreTyping: function () {
                    if (this.areTyping.indexOf(socket.id) <= -1) {
                        this.areTyping.push(socket.id);
                        socket.emit('user typing', socket.id);
                    }
                },
                stoppedTyping: function (keycode) {
                    // 回退键 或者 enter键
                    if (keycode == '13' || (keycode == '8' && this.message.text == '')) {
                        var index = this.areTyping.indexOf(socket.id);
                        if (index >= 0) {
                            this.areTyping.splice(index, 1);
                            socket.emit('stopped typing', socket.id);
                        }
                    }
                },
                chatPanelScrollToBottom: function () {
                    alert("弄啥赖！");

                    function scrollToBottom(id) {
                        var div = document.getElementById(id);
                        div.scrollTop = div.scrollHeight - div.clientHeight;
                    }
                }
            }
        });
    </script>
</body>

</html>